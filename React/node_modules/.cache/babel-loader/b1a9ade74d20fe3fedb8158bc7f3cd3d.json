{"ast":null,"code":"import { API_ROUTE } from \"../config/api\";\nimport Category from \"../Models/category\";\nimport Product from '../Models/product';\nconst ApiClient = {\n  get: (url, headers = {}) => {\n    return ApiClient.makeRequest(`${API_ROUTE}/${url}`, \"GET\", {}, headers);\n  },\n  post: (url, data) => {\n    return ApiClient.makeRequest(`${API_ROUTE}/${url}`, \"POST\", data);\n  },\n  delete: (url, id, headers = {}) => {\n    return ApiClient.makeRequest(`${API_ROUTE}/${url}`, \"DELETE\", id, headers);\n  },\n  put: (url, id, data) => {\n    return ApiClient.makeRequest(`${API_ROUTE}/${url}`, \"PUT\", id, data);\n  },\n  makeRequest: async (url, type, params = {}, headers = {}) => {\n    try {\n      type = type.toUpperCase();\n      let request = {\n        method: type,\n        headers: headers\n      };\n\n      if (type === \"POST\" || type === \"PUT\") {\n        request.headers = {\n          \"content-Type\": \"application/json;charset=UTF-8\"\n        };\n        request.body = JSON.stringify(params);\n      }\n\n      const result = await fetch(url, request);\n      return await result.json();\n    } catch (error) {\n      throw error.message;\n    }\n  }\n};\nconst ProductCategories = {\n  all: async () => {\n    const {\n      categories\n    } = await ApiClient.get(\"category\");\n    return categories.map(c => new Category(c.categoryId, c.name, c.description));\n  },\n  postMethod: async params => {\n    return await ApiClient.post(\"category\", params);\n  },\n  deleteCategory: async id => {\n    return await ApiClient.delete(`category/${id}`);\n  },\n  updateCategory: async (id, params) => {\n    return await ApiClient.put(`category/${id}`, params);\n  }\n};\nconst Products = {\n  getImage: async id => {\n    return await ApiClient.get(`Produt/${id}`);\n  },\n  getAll: async () => {\n    const {\n      products\n    } = await ApiClient.get(\"product\");\n    return products.map(p => new Product(p.productId, p.name, p.price, p.basePrice, p.description, p.categoryId, p.image));\n  },\n  postProduct: async params => {\n    return await ApiClient.post(\"Product\", params);\n  },\n  postImage: async (params, id) => {\n    return await ApiClient.post(`product/image/${id}`, params);\n  },\n  deleteProduct: async id => {\n    return await ApiClient.delete(`product/${id}`);\n  }\n};\nconst ApiHelper = {\n  ProductCategories,\n  Products\n};\nexport default ApiHelper;","map":{"version":3,"sources":["D:/an2facultate/Practica-an-II-master/React/src/helpers/api.js"],"names":["API_ROUTE","Category","Product","ApiClient","get","url","headers","makeRequest","post","data","delete","id","put","type","params","toUpperCase","request","method","body","JSON","stringify","result","fetch","json","error","message","ProductCategories","all","categories","map","c","categoryId","name","description","postMethod","deleteCategory","updateCategory","Products","getImage","getAll","products","p","productId","price","basePrice","image","postProduct","postImage","deleteProduct","ApiHelper"],"mappings":"AAAA,SAASA,SAAT,QAA0B,eAA1B;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,GAAG,EAAE,CAACC,GAAD,EAAMC,OAAO,GAAG,EAAhB,KAAuB;AAC1B,WAAOH,SAAS,CAACI,WAAV,CAAuB,GAAEP,SAAU,IAAGK,GAAI,EAA1C,EAA6C,KAA7C,EAAoD,EAApD,EAAwDC,OAAxD,CAAP;AACD,GAHe;AAIhBE,EAAAA,IAAI,EAAC,CAACH,GAAD,EAAKI,IAAL,KAAY;AAClB,WAAON,SAAS,CAACI,WAAV,CAAuB,GAAEP,SAAU,IAAGK,GAAI,EAA1C,EAA4C,MAA5C,EAAmDI,IAAnD,CAAP;AACE,GANe;AAOhBC,EAAAA,MAAM,EAAC,CAACL,GAAD,EAAKM,EAAL,EAAQL,OAAO,GAAG,EAAlB,KAAuB;AAC5B,WAAOH,SAAS,CAACI,WAAV,CAAuB,GAAEP,SAAU,IAAGK,GAAI,EAA1C,EAA4C,QAA5C,EAAqDM,EAArD,EAAwDL,OAAxD,CAAP;AACD,GATe;AAUhBM,EAAAA,GAAG,EAAC,CAACP,GAAD,EAAKM,EAAL,EAAQF,IAAR,KAAe;AACrB,WAAON,SAAS,CAACI,WAAV,CAAuB,GAAEP,SAAU,IAAGK,GAAI,EAA1C,EAA4C,KAA5C,EAAkDM,EAAlD,EAAqDF,IAArD,CAAP;AACG,GAZe;AAahBF,EAAAA,WAAW,EAAE,OAAOF,GAAP,EAAYQ,IAAZ,EAAkBC,MAAM,GAAG,EAA3B,EAA+BR,OAAO,GAAG,EAAzC,KAAgD;AAC3D,QAAI;AACFO,MAAAA,IAAI,GAAGA,IAAI,CAACE,WAAL,EAAP;AAEA,UAAIC,OAAO,GAAG;AAEZC,QAAAA,MAAM,EAAEJ,IAFI;AAGVP,QAAAA,OAAO,EAACA;AAHE,OAAd;;AAKA,UAAIO,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,KAAhC,EAAuC;AAErCG,QAAAA,OAAO,CAACV,OAAR,GAAgB;AAAC,0BAAgB;AAAjB,SAAhB;AACAU,QAAAA,OAAO,CAACE,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAAf;AAED;;AAED,YAAMO,MAAM,GAAG,MAAMC,KAAK,CAACjB,GAAD,EAAMW,OAAN,CAA1B;AACA,aAAO,MAAMK,MAAM,CAACE,IAAP,EAAb;AACD,KAjBD,CAiBE,OAAOC,KAAP,EAAc;AACd,YAAMA,KAAK,CAACC,OAAZ;AACD;AACF;AAlCe,CAAlB;AAqCA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,GAAG,EAAE,YAAY;AACf,UAAM;AAAEC,MAAAA;AAAF,QAAiB,MAAMzB,SAAS,CAACC,GAAV,CAAc,UAAd,CAA7B;AAEA,WAAOwB,UAAU,CAACC,GAAX,CAAgBC,CAAD,IAAO,IAAI7B,QAAJ,CAAa6B,CAAC,CAACC,UAAf,EAA2BD,CAAC,CAACE,IAA7B,EAAmCF,CAAC,CAACG,WAArC,CAAtB,CAAP;AACD,GALuB;AAMxBC,EAAAA,UAAU,EAAC,MAAOpB,MAAP,IAAiB;AACxB,WAAQ,MAAMX,SAAS,CAACK,IAAV,CAAe,UAAf,EAA0BM,MAA1B,CAAd;AACH,GARuB;AASxBqB,EAAAA,cAAc,EAAC,MAAMxB,EAAN,IAAW;AACxB,WAAO,MAAMR,SAAS,CAACO,MAAV,CAAkB,YAAWC,EAAG,EAAhC,CAAb;AACD,GAXuB;AAYxByB,EAAAA,cAAc,EAAC,OAAMzB,EAAN,EAASG,MAAT,KAAkB;AAC/B,WAAO,MAAMX,SAAS,CAACS,GAAV,CAAe,YAAWD,EAAG,EAA7B,EAA+BG,MAA/B,CAAb;AACD;AAduB,CAA1B;AAiBA,MAAMuB,QAAQ,GAAC;AACbC,EAAAA,QAAQ,EAAC,MAAM3B,EAAN,IAAW;AAClB,WAAO,MAAMR,SAAS,CAACC,GAAV,CAAe,UAASO,EAAG,EAA3B,CAAb;AAED,GAJY;AAKb4B,EAAAA,MAAM,EAAC,YAAS;AACd,UAAM;AAAEC,MAAAA;AAAF,QAAe,MAAMrC,SAAS,CAACC,GAAV,CAAc,SAAd,CAA3B;AAEA,WAAOoC,QAAQ,CAACX,GAAT,CAAcY,CAAD,IAAO,IAAIvC,OAAJ,CAAYuC,CAAC,CAACC,SAAd,EAAyBD,CAAC,CAACT,IAA3B,EAAiCS,CAAC,CAACE,KAAnC,EAA0CF,CAAC,CAACG,SAA5C,EAAuDH,CAAC,CAACR,WAAzD,EAAsEQ,CAAC,CAACV,UAAxE,EAAoFU,CAAC,CAACI,KAAtF,CAApB,CAAP;AACD,GATY;AAUbC,EAAAA,WAAW,EAAC,MAAOhC,MAAP,IAAgB;AAC1B,WAAO,MAAMX,SAAS,CAACK,IAAV,CAAe,SAAf,EAAyBM,MAAzB,CAAb;AACD,GAZY;AAabiC,EAAAA,SAAS,EAAC,OAAOjC,MAAP,EAAcH,EAAd,KAAmB;AAC3B,WAAO,MAAOR,SAAS,CAACK,IAAV,CAAgB,iBAAgBG,EAAG,EAAnC,EAAqCG,MAArC,CAAd;AACD,GAfY;AAgBbkC,EAAAA,aAAa,EAAC,MAAOrC,EAAP,IAAY;AACxB,WAAO,MAAMR,SAAS,CAACO,MAAV,CAAkB,WAAUC,EAAG,EAA/B,CAAb;AACD;AAlBY,CAAf;AAoBA,MAAMsC,SAAS,GAAG;AAChBvB,EAAAA,iBADgB;AAEhBW,EAAAA;AAFgB,CAAlB;AAIA,eAAeY,SAAf","sourcesContent":["import { API_ROUTE } from \"../config/api\";\nimport Category from \"../Models/category\";\nimport Product from '../Models/product'\nconst ApiClient = {\n  get: (url, headers = {}) => {\n    return ApiClient.makeRequest(`${API_ROUTE}/${url}`, \"GET\", {}, headers);\n  },\n  post:(url,data)=>{\n return ApiClient.makeRequest(`${API_ROUTE}/${url}`,\"POST\",data)\n  },\n  delete:(url,id,headers = {})=>{\n    return ApiClient.makeRequest(`${API_ROUTE}/${url}`,\"DELETE\",id,headers)\n  },\n  put:(url,id,data)=>{\nreturn ApiClient.makeRequest(`${API_ROUTE}/${url}`,\"PUT\",id,data)\n  },\n  makeRequest: async (url, type, params = {}, headers = {}) => {\n    try {\n      type = type.toUpperCase();\n     \n      let request = {\n    \n        method: type,\n          headers:headers\n      }\n      if (type === \"POST\" || type === \"PUT\") {\n\n        request.headers={\"content-Type\": \"application/json;charset=UTF-8\"}\n        request.body = JSON.stringify(params);\n        \n      }\n      \n      const result = await fetch(url, request);\n      return await result.json();\n    } catch (error) {\n      throw error.message;\n    }\n  },\n};\n\nconst ProductCategories = {\n  all: async () => {\n    const { categories } = await ApiClient.get(\"category\");\n\n    return categories.map((c) => new Category(c.categoryId, c.name, c.description));\n  },\n  postMethod:async (params) =>{\n      return  await ApiClient.post(\"category\",params);\n  },\n  deleteCategory:async(id)=>{\n    return await ApiClient.delete(`category/${id}`);\n  },\n  updateCategory:async(id,params)=>{\n    return await ApiClient.put(`category/${id}`,params)\n  }\n};\n\nconst Products={\n  getImage:async(id)=>{\n    return await ApiClient.get(`Produt/${id}`);\n   \n  },\n  getAll:async()=>{\n    const { products } = await ApiClient.get(\"product\");\n\n    return products.map((p) => new Product(p.productId, p.name, p.price, p.basePrice, p.description, p.categoryId, p.image)); \n  },\n  postProduct:async (params)=>{\n    return await ApiClient.post(\"Product\",params)\n  },\n  postImage:async (params,id)=>{\n    return await  ApiClient.post(`product/image/${id}`,params);\n  },\n  deleteProduct:async (id)=>{\n    return await ApiClient.delete(`product/${id}`);\n  }\n}\nconst ApiHelper = {\n  ProductCategories,\n  Products\n};\nexport default ApiHelper;\n"]},"metadata":{},"sourceType":"module"}